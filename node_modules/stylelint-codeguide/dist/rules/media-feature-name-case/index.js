"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleName = exports.meta = exports.messages = exports["default"] = void 0;
var _cssTokenizer = require("@csstools/css-tokenizer");
var _atRuleParamIndex = _interopRequireDefault(require("../../utils/atRuleParamIndex"));
var _findMediaFeatureNames = _interopRequireDefault(require("../../utils/findMediaFeatureNames"));
var _isCustomMediaQuery = _interopRequireDefault(require("../../utils/isCustomMediaQuery"));
var _report = _interopRequireDefault(require("../../utils/report"));
var _ruleMessages = _interopRequireDefault(require("../../utils/ruleMessages"));
var _validateOptions = _interopRequireDefault(require("../../utils/validateOptions"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var ruleName = exports.ruleName = "media-feature-name-case";
var messages = exports.messages = (0, _ruleMessages["default"])(ruleName, {
  expected: function expected(actual, _expected) {
    return "Expected \"".concat(actual, "\" to be \"").concat(_expected, "\"");
  }
});
var meta = exports.meta = {
  url: "https://stylelint.io/user-guide/rules/media-feature-name-case",
  fixable: true
};

/** @type {import('stylelint').Rule} */
var rule = function rule(primary, _secondaryOptions, context) {
  return function (root, result) {
    var validOptions = (0, _validateOptions["default"])(result, ruleName, {
      actual: primary,
      possible: ["lower", "upper"]
    });
    if (!validOptions) {
      return;
    }
    root.walkAtRules(/^media$/i, function (atRule) {
      var _atRule$raws$params;
      var hasComments = (_atRule$raws$params = atRule.raws.params) === null || _atRule$raws$params === void 0 ? void 0 : _atRule$raws$params.raw;
      var mediaRule = hasComments ? hasComments : atRule.params;
      var hasFixes = false;
      mediaRule = (0, _findMediaFeatureNames["default"])(mediaRule, function (mediaFeatureNameToken) {
        var _mediaFeatureNameToke = _slicedToArray(mediaFeatureNameToken, 5),
          startIndex = _mediaFeatureNameToke[2],
          endIndex = _mediaFeatureNameToke[3],
          featureName = _mediaFeatureNameToke[4].value;
        if ((0, _isCustomMediaQuery["default"])(featureName)) {
          return;
        }
        var expectedFeatureName = primary === "lower" ? featureName.toLowerCase() : featureName.toUpperCase();
        if (featureName === expectedFeatureName) {
          return;
        }
        if (context.fix) {
          (0, _cssTokenizer.mutateIdent)(mediaFeatureNameToken, expectedFeatureName);
          hasFixes = true;
          return;
        }
        var atRuleIndex = (0, _atRuleParamIndex["default"])(atRule);
        (0, _report["default"])({
          message: messages.expected(featureName, expectedFeatureName),
          node: atRule,
          index: atRuleIndex + startIndex,
          endIndex: atRuleIndex + endIndex + 1,
          ruleName: ruleName,
          result: result
        });
      }).stringify();
      if (hasFixes) {
        if (hasComments) {
          if (atRule.raws.params === null) {
            throw new Error("The `AtRuleRaws` node must have a `params` property");
          }
          atRule.raws.params.raw = mediaRule;
        } else {
          atRule.params = mediaRule;
        }
      }
    });
  };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
var _default = exports["default"] = rule;